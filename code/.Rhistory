}
model {
// Definitions
vector[N] mu;
// Likelihood
for (i in 1:N) {
mu[i] = b1[x1[i]] + b2[x2[i]] + b3[x1[i], x2[i]];
//y[i] ~ normal(mu[i], sigma[x[i]]);
y[i] ~ normal(mu[i], sigma);
}
// Priors
sigma ~ cauchy(1, 1);
for (j in 1:nx1Levels) {
b1[j] ~ normal(location_2Mean, location_2MeanSD);
// Didn't close braces
}
for (j in 1:nx2Levels) {
b2[j] ~ normal(monthMean, monthMeanSD);
// Didn't close braces
}
for (j in 1:nx1Levels) {
for (k in 1: nx2Levels) {
// Have as b5 rather than b3
//b5[j,k] ~ normal (0,1);
b3[j,k] ~ normal(0, 1);
}
}
// Hyperpriors
location_2Mean   ~ normal(0, 1);
location_2MeanSD ~ cauchy(0, 1);
monthMean   ~ normal(0, 1);
monthMeanSD ~ cauchy(0, 1);
}
generated quantities {
// Definitions
vector[N] y_pred;
for (i in 1:N) {
// The way you deal with the interaction term is incorrect here, and sigma, and addition of parameters
// y_pred[i] = normal_rng(b1[x1[i]], b2[x2[i]], b3[x1[i]] + [x2[i]], sigma[x[i]]);
y_pred[i] = normal_rng(b1[x1[i]] + b2[x2[i]] + b3[x1[i], x2[i]], sigma);
}
}
"
writeLines(modelstring, con = "model.stan")
#--------------------------#
#     run STAN             #
#--------------------------#
stanFit <- stan(file = "model.stan",
data = dataList,
pars = c("b1", "b2", "b3", "sigma", "y_pred"),
warmup = 2000,
iter = 9000,
chains = 3)
length(zy)
length(x1)
length(x2)
unique(x1)
data = read.table("dpmperday_test.txt", header = TRUE, sep = "\t")
#---Filter Locations (Select data in with these 12 data names and all columns) ---#
data = data[data$location_2 == "FAN LAU" | data$location_2 == "KAU LING CHUNG" | data$location_2 == "LUNG KWU CHAU N" | data$location_2 == "PEAKED HILL" | data$location_2 == "SHA CHAU SE" |  data$location_2 == "SHUM WAT" | data$location_2 == "SIU A CHAU" | data$location_2 == "SIU HO WAN" | data$location_2 == "TAI A CHAU N" | data$location_2 == "TAI A CHAU S" | data$location_2 == "TAI MO TO" | data$location_2 == "TAI O", ]
#--------------------------------------------------------#
# Still contains "LUNG KWU CHAU S" and "LUNG KWU CHAU X" #
#--------------------------------------------------------#
data = data[data$location_2 != "LUNG KWU CHAU S", ]
#--- Filter Time (all locations when year is 2019 or days greater than June 25th 2018---#
data = data[(data$year == 2019) | (data$year == 2018 & data$month >= 7) | (data$year == 2018 & data$month == 6 & data$day >= 25), ]
#---DETECTION POSITIVE MINUTES (DPM)---#
y = data$dpm
yMean = mean(y)
ySD = sd(y)
zy = (y - yMean) / ySD
N = length(zy)
#---C-POD LOCATION---#
x1 = as.numeric(data$location_2)
x1Names = levels(data$location_2)
nx1Levels = length(unique(data$location_2))
#----MONTH---#
## Month isn't a factor, but is already an integer
x2 = data$month
#x2 = as.numeric(data$month)
#x2Names = levels(data$month)
nx2Levels = length(unique(data$month))
str(data)
#-----------------------------#
# Create a data list for Stan #
#-----------------------------#
dataList = list(
y = zy,
x1 = x1,
x2 = x2,
N = N,
nx1Levels = nx1Levels,
nx2Levels = nx2Levels
)
#-----------------------------#
# Define the model and write  #
# a string for Stan           #
#-----------------------------#
modelstring = "
data {
int N;           // Sample size
int nx1Levels;   // Number of locations in data set (12)
int nx2Levels;   // Number of months in data set (12)
vector[N] y;     // Vector of dpm
int x1[N];       // The location data
int x2[N];       // The month data
}
parameters {
real b1[nx1Levels];               // The effect of CPOD location
real b2[nx2Levels];               // The effect of month of the year
real b3[nx1Levels, nx2Levels];    // Interaction effect of location and month on dpm
// You have 2 sigmas, but both named the same thing. I wouldl just have one
//real<lower=0> sigma[nx1Levels];    // Coefficients for sd of each location
//real<lower=0> sigma[nx2Levels];    // Coefficient for sd of each month
real sigma;
real location_2Mean;              // Mean dpm across all locations
real location_2MeanSD;            // sd for mean dpm across all location
real monthMean;                   // mean dpm across all months
real monthMeanSD;                 // sd for mean dpm across all months
}
model {
// Definitions
vector[N] mu;
// Likelihood
for (i in 1:N) {
mu[i] = b1[x1[i]] + b2[x2[i]] + b3[x1[i], x2[i]];
//y[i] ~ normal(mu[i], sigma[x[i]]);
y[i] ~ normal(mu[i], sigma);
}
// Priors
sigma ~ cauchy(1, 1);
for (j in 1:nx1Levels) {
b1[j] ~ normal(location_2Mean, location_2MeanSD);
// Didn't close braces
}
for (j in 1:nx2Levels) {
b2[j] ~ normal(monthMean, monthMeanSD);
// Didn't close braces
}
for (j in 1:nx1Levels) {
for (k in 1: nx2Levels) {
// Have as b5 rather than b3
//b5[j,k] ~ normal (0,1);
b3[j,k] ~ normal(0, 1);
}
}
// Hyperpriors
location_2Mean   ~ normal(0, 1);
location_2MeanSD ~ cauchy(0, 1);
monthMean   ~ normal(0, 1);
monthMeanSD ~ cauchy(0, 1);
}
generated quantities {
// Definitions
vector[N] y_pred;
for (i in 1:N) {
// The way you deal with the interaction term is incorrect here, and sigma, and addition of parameters
// y_pred[i] = normal_rng(b1[x1[i]], b2[x2[i]], b3[x1[i]] + [x2[i]], sigma[x[i]]);
y_pred[i] = normal_rng(b1[x1[i]] + b2[x2[i]] + b3[x1[i], x2[i]], sigma);
}
}
"
writeLines(modelstring, con = "model.stan")
#--------------------------#
#     run STAN             #
#--------------------------#
stanFit <- stan(file = "model.stan",
data = dataList,
pars = c("b1", "b2", "b3", "sigma", "y_pred"),
warmup = 2000,
iter = 9000,
chains = 3)
#---Load libraries---#
library(ggplot2)
library(rstan)
# Added this line below
options(mc.cores = parallel::detectCores())
setwd("~/Desktop")
data = read.table("dpmperday_test.txt", header = TRUE, sep = "\t")
#---Filter Locations (Select data in with these 12 data names and all columns) ---#
data = data[data$location_2 == "FAN LAU" | data$location_2 == "KAU LING CHUNG" | data$location_2 == "LUNG KWU CHAU N" | data$location_2 == "PEAKED HILL" | data$location_2 == "SHA CHAU SE" |  data$location_2 == "SHUM WAT" | data$location_2 == "SIU A CHAU" | data$location_2 == "SIU HO WAN" | data$location_2 == "TAI A CHAU N" | data$location_2 == "TAI A CHAU S" | data$location_2 == "TAI MO TO" | data$location_2 == "TAI O", ]
#--- Filter Time (all locations when year is 2019 or days greater than June 25th 2018---#
data = data[(data$year == 2019) | (data$year == 2018 & data$month >= 7) | (data$year == 2018 & data$month == 6 & data$day >= 25), ]
#---DETECTION POSITIVE MINUTES (DPM)---#
y = data$dpm
yMean = mean(y)
ySD = sd(y)
zy = (y - yMean) / ySD
N = length(zy)
#---C-POD LOCATION---#
data$location_2 = factor(data$location_2)
x1 = as.numeric(data$location_2)
x1Names = levels(data$location_2)
nx1Levels = length(unique(data$location_2))
#----MONTH---#
## Month isn't a factor, but is already an integer
x2 = data$month
#x2 = as.numeric(data$month)
#x2Names = levels(data$month)
nx2Levels = length(unique(data$month))
length(unique(x1))
length(unique(x1Names))
#-----------------------------#
# Create a data list for Stan #
#-----------------------------#
dataList = list(
y = zy,
x1 = x1,
x2 = x2,
N = N,
nx1Levels = nx1Levels,
nx2Levels = nx2Levels
)
#-----------------------------#
# Define the model and write  #
# a string for Stan           #
#-----------------------------#
modelstring = "
data {
int N;           // Sample size
int nx1Levels;   // Number of locations in data set (12)
int nx2Levels;   // Number of months in data set (12)
vector[N] y;     // Vector of dpm
int x1[N];       // The location data
int x2[N];       // The month data
}
parameters {
real b1[nx1Levels];               // The effect of CPOD location
real b2[nx2Levels];               // The effect of month of the year
real b3[nx1Levels, nx2Levels];    // Interaction effect of location and month on dpm
// You have 2 sigmas, but both named the same thing. I wouldl just have one
//real<lower=0> sigma[nx1Levels];    // Coefficients for sd of each location
//real<lower=0> sigma[nx2Levels];    // Coefficient for sd of each month
real sigma;
real location_2Mean;              // Mean dpm across all locations
real location_2MeanSD;            // sd for mean dpm across all location
real monthMean;                   // mean dpm across all months
real monthMeanSD;                 // sd for mean dpm across all months
}
model {
// Definitions
vector[N] mu;
// Likelihood
for (i in 1:N) {
mu[i] = b1[x1[i]] + b2[x2[i]] + b3[x1[i], x2[i]];
//y[i] ~ normal(mu[i], sigma[x[i]]);
y[i] ~ normal(mu[i], sigma);
}
// Priors
sigma ~ cauchy(1, 1);
for (j in 1:nx1Levels) {
b1[j] ~ normal(location_2Mean, location_2MeanSD);
// Didn't close braces
}
for (j in 1:nx2Levels) {
b2[j] ~ normal(monthMean, monthMeanSD);
// Didn't close braces
}
for (j in 1:nx1Levels) {
for (k in 1: nx2Levels) {
// Have as b5 rather than b3
//b5[j,k] ~ normal (0,1);
b3[j,k] ~ normal(0, 1);
}
}
// Hyperpriors
location_2Mean   ~ normal(0, 1);
location_2MeanSD ~ cauchy(0, 1);
monthMean   ~ normal(0, 1);
monthMeanSD ~ cauchy(0, 1);
}
generated quantities {
// Definitions
vector[N] y_pred;
for (i in 1:N) {
// The way you deal with the interaction term is incorrect here, and sigma, and addition of parameters
// y_pred[i] = normal_rng(b1[x1[i]], b2[x2[i]], b3[x1[i]] + [x2[i]], sigma[x[i]]);
y_pred[i] = normal_rng(b1[x1[i]] + b2[x2[i]] + b3[x1[i], x2[i]], sigma);
}
}
"
writeLines(modelstring, con = "model.stan")
#--------------------------#
#     run STAN             #
#--------------------------#
stanFit <- stan(file = "model.stan",
data = dataList,
pars = c("b1", "b2", "b3", "sigma", "y_pred"),
warmup = 2000,
iter = 9000,
chains = 3)
data = read.table("dpmperday_test.txt", header = TRUE, sep = "\t")
#---Filter Locations (Select data in with these 12 data names and all columns) ---#
data = data[data$location_2 == "FAN LAU" | data$location_2 == "KAU LING CHUNG" | data$location_2 == "LUNG KWU CHAU N" | data$location_2 == "PEAKED HILL" | data$location_2 == "SHA CHAU SE" |  data$location_2 == "SHUM WAT" | data$location_2 == "SIU A CHAU" | data$location_2 == "SIU HO WAN" | data$location_2 == "TAI A CHAU N" | data$location_2 == "TAI A CHAU S" | data$location_2 == "TAI MO TO" | data$location_2 == "TAI O", ]
#--- Filter Time (all locations when year is 2019 or days greater than June 25th 2018---#
data = data[(data$year == 2019) | (data$year == 2018 & data$month >= 7) | (data$year == 2018 & data$month == 6 & data$day >= 25), ]
#---DETECTION POSITIVE MINUTES (DPM)---#
y = data$dpm
yMean = mean(y)
ySD = sd(y)
zy = (y - yMean) / ySD
N = length(zy)
#---C-POD LOCATION---#
# Had to add this line in, because R was keeping old factor names
data$location_2 = factor(data$location_2)
x1 = as.numeric(data$location_2)
x1Names = levels(data$location_2)
nx1Levels = length(unique(data$location_2))
hist(y)
length(y)
N
#---C-POD LOCATION---#
# Had to add this line in, because R was keeping old factor names
data$location_2 = factor(data$location_2)
x1 = as.numeric(data$location_2)
x1Names = levels(data$location_2)
nx1Levels = length(unique(data$location_2))
x1 = as.numeric(data$location_2)
x1Names = levels(data$location_2)
nx1Levels = length(unique(data$location_2))
length(unique(x1))
length(unique(x1Names))
data = read.table("dpmperday_test.txt", header = TRUE, sep = "\t")
#---Filter Locations (Select data in with these 12 data names and all columns) ---#
data = data[data$location_2 == "FAN LAU" | data$location_2 == "KAU LING CHUNG" | data$location_2 == "LUNG KWU CHAU N" | data$location_2 == "PEAKED HILL" | data$location_2 == "SHA CHAU SE" |  data$location_2 == "SHUM WAT" | data$location_2 == "SIU A CHAU" | data$location_2 == "SIU HO WAN" | data$location_2 == "TAI A CHAU N" | data$location_2 == "TAI A CHAU S" | data$location_2 == "TAI MO TO" | data$location_2 == "TAI O", ]
#--- Filter Time (all locations when year is 2019 or days greater than June 25th 2018---#
data = data[(data$year == 2019) | (data$year == 2018 & data$month >= 7) | (data$year == 2018 & data$month == 6 & data$day >= 25), ]
#---DETECTION POSITIVE MINUTES (DPM)---#
y = data$dpm
yMean = mean(y)
ySD = sd(y)
zy = (y - yMean) / ySD
N = length(zy)
x1 = as.numeric(data$location_2)
x1Names = levels(data$location_2)
nx1Levels = length(unique(data$location_2))
length(unique(x1))
length(unique(x1Names))
nx1Levels
str(data)
#----MONTH---#
## Month isn't a factor, but is already an integer
x2 = data$month
#x2 = as.numeric(data$month)
#x2Names = levels(data$month)
nx2Levels = length(unique(data$month))
#-----------------------------#
# Create a data list for Stan #
#-----------------------------#
dataList = list(
y = zy,
x1 = x1,
x2 = x2,
N = N,
nx1Levels = nx1Levels,
nx2Levels = nx2Levels
)
#-----------------------------#
# Define the model and write  #
# a string for Stan           #
#-----------------------------#
modelstring = "
data {
int N;           // Sample size
int nx1Levels;   // Number of locations in data set (12)
int nx2Levels;   // Number of months in data set (12)
vector[N] y;     // Vector of dpm
int x1[N];       // The location data
int x2[N];       // The month data
}
parameters {
real b1[nx1Levels];               // The effect of CPOD location
real b2[nx2Levels];               // The effect of month of the year
real b3[nx1Levels, nx2Levels];    // Interaction effect of location and month on dpm
// You have 2 sigmas, but both named the same thing. I wouldl just have one
//real<lower=0> sigma[nx1Levels];    // Coefficients for sd of each location
//real<lower=0> sigma[nx2Levels];    // Coefficient for sd of each month
real sigma;
real location_2Mean;              // Mean dpm across all locations
real location_2MeanSD;            // sd for mean dpm across all location
real monthMean;                   // mean dpm across all months
real monthMeanSD;                 // sd for mean dpm across all months
}
model {
// Definitions
vector[N] mu;
// Likelihood
for (i in 1:N) {
mu[i] = b1[x1[i]] + b2[x2[i]] + b3[x1[i], x2[i]];
//y[i] ~ normal(mu[i], sigma[x[i]]);
y[i] ~ normal(mu[i], sigma);
}
// Priors
sigma ~ cauchy(1, 1);
for (j in 1:nx1Levels) {
b1[j] ~ normal(location_2Mean, location_2MeanSD);
// Didn't close braces
}
for (j in 1:nx2Levels) {
b2[j] ~ normal(monthMean, monthMeanSD);
// Didn't close braces
}
for (j in 1:nx1Levels) {
for (k in 1: nx2Levels) {
// Have as b5 rather than b3
//b5[j,k] ~ normal (0,1);
b3[j,k] ~ normal(0, 1);
}
}
// Hyperpriors
location_2Mean   ~ normal(0, 1);
location_2MeanSD ~ cauchy(0, 1);
monthMean   ~ normal(0, 1);
monthMeanSD ~ cauchy(0, 1);
}
generated quantities {
// Definitions
vector[N] y_pred;
for (i in 1:N) {
// The way you deal with the interaction term is incorrect here, and sigma, and addition of parameters
// y_pred[i] = normal_rng(b1[x1[i]], b2[x2[i]], b3[x1[i]] + [x2[i]], sigma[x[i]]);
y_pred[i] = normal_rng(b1[x1[i]] + b2[x2[i]] + b3[x1[i], x2[i]], sigma);
}
}
"
writeLines(modelstring, con = "model.stan")
#--------------------------#
#     run STAN             #
#--------------------------#
stanFit <- stan(file = "model.stan",
data = dataList,
pars = c("b1", "b2", "b3", "sigma", "y_pred"),
warmup = 2000,
iter = 9000,
chains = 3)
hist(zy)
setwd("~/Research_Projects/Right_Whale/Papers/Pedigree_Abundance/analyses/for_publication/guide/code")
simSampled_Estimates = read.table("../results/simulationResults.csv", header = TRUE, sep = ",")
propSampled = c(0.2, 0.4, 0.6, 0.8)
#----------------------------#
# Organize the Sampling Data #
#----------------------------#
Ps = c(1 - mean(simSampled_Estimates[1:100, 1]), 1 - mean(simSampled_Estimates[101:200, 1]), 1 - mean(simSampled_Estimates[201:300, 1]), 1 - mean(simSampled_Estimates[301:400, 1]))
PshighHDI = c(1 - mean(simSampled_Estimates[1:100, 2]), 1 - mean(simSampled_Estimates[101:200, 2]), 1 - mean(simSampled_Estimates[201:300, 2]), 1 - mean(simSampled_Estimates[301:400, 2]))
PslowHDI = c(1 - mean(simSampled_Estimates[1:100, 3]), 1 - mean(simSampled_Estimates[101:200, 3]), 1 - mean(simSampled_Estimates[201:300, 3]), 1 - mean(simSampled_Estimates[301:400, 3]))
#----------------------------#
# Organize the Breeding Data #
#----------------------------#
Pbd = c(mean(simSampled_Estimates[1:100, 4]), mean(simSampled_Estimates[101:200, 4]), mean(simSampled_Estimates[201:300, 4]), mean(simSampled_Estimates[301:400, 4]))
PbdlowHDI = c(mean(simSampled_Estimates[1:100, 5]), mean(simSampled_Estimates[101:200, 5]), mean(simSampled_Estimates[201:300, 5]), mean(simSampled_Estimates[301:400,5]))
PbdhighHDI = c(mean(simSampled_Estimates[1:100, 6]), mean(simSampled_Estimates[101:200, 6]), mean(simSampled_Estimates[201:300, 6]), mean(simSampled_Estimates[301:400,6]))
#----------------------------#
#       Plot the data        #
#----------------------------#
par(mfrow = c(1, 2))
#--- Sampling ---#
plot(Ps ~ propSampled, pch = 16, ylim = c(0, 1), xaxt = "n", xlab = "Proportion Sampled")
axis(1, at = propSampled, labels = propSampled)
for (i in 1:4) {
abline(h = propSampled[i], lty = "dotted")
}
for (i in 1:4) {
segments(x0 = propSampled[i], y0 = PslowHDI[i], x1 = propSampled[i], y1 = PshighHDI[i ])
}
mtext("A", side = 3, line = 1.5, adj = 0, cex = 2)
#----------------------------#
# Organize the Breeding Data #
#----------------------------#
Pb = c(mean(simSampled_Estimates[1:100, 4]), mean(simSampled_Estimates[101:200, 4]), mean(simSampled_Estimates[201:300, 4]), mean(simSampled_Estimates[301:400, 4]))
#--- Breeding ---#
plot(Pb ~ propSampled, pch = 16, cex = 1.5, ylim = c(0.2, 0.6), xaxt = "n", xlab = "Proportion Sampled")
axis(1, at = propSampled, labels = propSampled)
abline(h = 0.4, lty = "dashed")
for (i in 1:4) {
segments(x0 = propSampled[i], y0 = PbdlowHDI[i], x1 = propSampled[i], y1 = PbdhighHDI[i])
}
mtext("B", side = 3, line = 1.5, adj = 0, cex = 2)
rwsummary = read.table("../results/rwSummary.csv", header = TRUE, sep = ",")
ggplot(data = rwsummary, aes(x = Year)) +
theme_bw() +
geom_point(mapping = aes(y = t_N)) +
geom_ribbon(aes(ymin = t_N.low, ymax = t_N.high), alpha = 0.25) +
geom_point(mapping = aes(y = t_pace), col = "red", alpha = 0.75) +
geom_linerange(aes(ymin = t_pace.low, ymax = t_pace.high), colour = "red", alpha = 0.75) +
ylim(min(rwsummary$t_N.low), max(rwsummary$t_N.high)) +
ylab(expression(hat(N)))
library(ggplot2)
ggplot(data = rwsummary, aes(x = Year)) +
theme_bw() +
geom_point(mapping = aes(y = t_N)) +
geom_ribbon(aes(ymin = t_N.low, ymax = t_N.high), alpha = 0.25) +
geom_point(mapping = aes(y = t_pace), col = "red", alpha = 0.75) +
geom_linerange(aes(ymin = t_pace.low, ymax = t_pace.high), colour = "red", alpha = 0.75) +
ylim(min(rwsummary$t_N.low), max(rwsummary$t_N.high)) +
ylab(expression(hat(N)))
par(mfrow = c(1, 2))
ggplot(data = rwsummary, aes(x = Year)) +
theme_bw() +
geom_point(mapping = aes(y = t_N)) +
geom_ribbon(aes(ymin = t_N.low, ymax = t_N.high), alpha = 0.25) +
geom_point(mapping = aes(y = t_pace), col = "red", alpha = 0.75) +
geom_linerange(aes(ymin = t_pace.low, ymax = t_pace.high), colour = "red", alpha = 0.75) +
ylim(min(rwsummary$t_N.low), max(rwsummary$t_N.high)) +
ylab(expression(hat(N)))
ggplot(data = rwsummary, aes(x = Year)) +
theme_bw() +
geom_point(mapping = aes(y = t_N)) +
geom_ribbon(aes(ymin = t_N.low, ymax = t_N.high), alpha = 0.25) +
geom_point(mapping = aes(y = t_pace), col = "red", alpha = 0.75) +
geom_linerange(aes(ymin = t_pace.low, ymax = t_pace.high), colour = "red", alpha = 0.75) +
ylim(min(rwsummary$t_N.low), max(rwsummary$t_N.high)) +
ylab(expression(hat(N)))
